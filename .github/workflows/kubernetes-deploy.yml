name: Deploy to Kubernetes

on:
  push:
    branches:
      - shreyas
    paths:
     
  workflow_dispatch:

jobs:
  deploy-to-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    env:
      VM_PUBLIC_IP: ${{ secrets.VM_PUBLIC_IP }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up SSH Key
        run: |
          echo "${{ env.SSH_PRIVATE_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

      - name: Create ACR Image Pull Secret on Kubernetes VM
        run: |
          ssh -o "StrictHostKeyChecking=no" -i ssh_key.pem azureuser@${{ env.VM_PUBLIC_IP }} << EOF
            kubectl create namespace frontend || true
            kubectl create namespace backend || true
            kubectl delete secret acr-auth -n frontend || true
            kubectl delete secret acr-auth -n backend || true
            kubectl create secret docker-registry acr-auth \
              --docker-server=${{ env.ACR_LOGIN_SERVER }} \
              --docker-username=${{ env.ACR_USERNAME }} \
              --docker-password=${{ env.ACR_PASSWORD }} \
              --docker-email=odl_user_1468642@seneca-caa900naa.cloudlabs.ai \
              -n frontend
            kubectl create secret docker-registry acr-auth \
              --docker-server=${{ env.ACR_LOGIN_SERVER }} \
              --docker-username=${{ env.ACR_USERNAME }} \
              --docker-password=${{ env.ACR_PASSWORD }} \
              --docker-email=odl_user_1468642@seneca-caa900naa.cloudlabs.ai \
              -n backend
          EOF

      - name: Set Image Tags
        run: |
          FRONTEND_IMAGE_TAG="frontend-v${{ github.run_number }}"
          BACKEND_IMAGE_TAG="backend-v${{ github.run_number }}"
          echo "FRONTEND_IMAGE_TAG=${FRONTEND_IMAGE_TAG}" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_TAG=${BACKEND_IMAGE_TAG}" >> $GITHUB_ENV

      - name: Build and Push Frontend Image
        if: env.build_frontend == 'true'
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_IMAGE_TAG }} -f frontend/Dockerfile ./frontend
          docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_IMAGE_TAG }}

      - name: Build and Push Backend Image
        if: env.build_backend == 'true'
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_IMAGE_TAG }} -f backend/Dockerfile ./backend
          docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_IMAGE_TAG }}

      - name: SSH into VM and Update Kubernetes Deployments with New Images
        run: |
          ssh -o "StrictHostKeyChecking=no" -i ssh_key.pem azureuser@${{ env.VM_PUBLIC_IP }} << EOF
            kubectl set image deployment/frontend-deployment frontend=${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_IMAGE_TAG }} -n frontend
            kubectl set image deployment/backend-deployment backend=${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_IMAGE_TAG }} -n backend
            kubectl rollout status deployment/frontend-deployment -n frontend
            kubectl rollout status deployment/backend-deployment -n backend
          EOF
