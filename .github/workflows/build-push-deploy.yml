name: Build, Push, and Deploy to Kubernetes

on:
  push:
    branches:
      - shreyas
    paths:
      - "frontend/**"
      - "backend/**"
      - "k8s-manifests/**"
  workflow_dispatch:

jobs:
  build-push-deploy:
    name: Build, Push, and Deploy to Kubernetes
    runs-on: ubuntu-latest
    env:
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      VM_PUBLIC_IP: ${{ secrets.VM_PUBLIC_IP }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    steps:
      # Step 1: Check out the code
      - name: Check out the code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Step 2: Log in to Azure Container Registry
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      # Step 3: Set Image Tags
      - name: Set Image Tags
        run: |
          FRONTEND_IMAGE_TAG="frontend-v${{ github.run_number }}"
          BACKEND_IMAGE_TAG="backend-v${{ github.run_number }}"
          echo "FRONTEND_IMAGE_TAG=${FRONTEND_IMAGE_TAG}" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_TAG=${BACKEND_IMAGE_TAG}" >> $GITHUB_ENV

      # Step 4: Determine if frontend changed
      - name: Determine if frontend changed
        id: frontend_changed
        run: |
          PREVIOUS_SHA="${{ github.event.before }}"
          CURRENT_SHA="${{ github.sha }}"
          if [ -z "$PREVIOUS_SHA" ]; then
            echo "No previous commit; assuming full build required."
            echo "build_frontend=true" >> $GITHUB_ENV
          elif git diff --name-only "$PREVIOUS_SHA" "$CURRENT_SHA" | grep -q '^frontend/'; then
            echo "Frontend changed."
            echo "build_frontend=true" >> $GITHUB_ENV
          else
            echo "Frontend not changed."
            echo "build_frontend=false" >> $GITHUB_ENV
          fi

      # Step 5: Determine if backend changed
      - name: Determine if backend changed
        id: backend_changed
        run: |
          PREVIOUS_SHA="${{ github.event.before }}"
          CURRENT_SHA="${{ github.sha }}"
          if [ -z "$PREVIOUS_SHA" ]; then
            echo "No previous commit; assuming full build required."
            echo "build_backend=true" >> $GITHUB_ENV
          elif git diff --name-only "$PREVIOUS_SHA" "$CURRENT_SHA" | grep -q '^backend/'; then
            echo "Backend changed."
            echo "build_backend=true" >> $GITHUB_ENV
          else
            echo "Backend not changed."
            echo "build_backend=false" >> $GITHUB_ENV
          fi

      # Step 6: Build and Push Frontend Image
      - name: Build and Push Frontend Image
        if: env.build_frontend == 'true'
        run: |
         docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_IMAGE_TAG }} -f frontend/Dockerfile ./frontend
         docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_IMAGE_TAG }}

      # Step 7: Build and Push Backend Image
      - name: Build and Push Backend Image
        if: env.build_backend == 'true'
        run: |
         docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_IMAGE_TAG }} -f backend/Dockerfile ./backend
         docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_IMAGE_TAG }}

      # Step 8: Set up SSH Key for accessing the Kubernetes VM
      - name: Set up SSH Key
        run: |
          echo "${{ env.SSH_PRIVATE_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

      # Step 9: Copy Kubernetes Manifests to VM (only if build_frontend or build_backend is true)
      - name: Copy Kubernetes Manifests to VM
        if: env.build_frontend == 'true' || env.build_backend == 'true'
        run: |
          scp -o "StrictHostKeyChecking=no" -i ssh_key.pem k8s-manifests/*.yaml azureuser@${{ env.VM_PUBLIC_IP }}:/home/azureuser/

      # Step 10: SSH into VM, Create ACR Pull Secrets, and Apply Kubernetes Configs Conditionally
      - name: SSH into VM and Apply Kubernetes Configs with Rolling Update
        if: env.build_frontend == 'true' || env.build_backend == 'true'
        run: |
          ssh -o "StrictHostKeyChecking=no" -i ssh_key.pem azureuser@${{ env.VM_PUBLIC_IP }} << EOF
            # Apply namespace YAML files first
            kubectl apply -f /home/azureuser/frontend-namespace.yaml
            kubectl apply -f /home/azureuser/backend-namespace.yaml
            
            # Create ACR pull secrets in each namespace
            kubectl delete secret acr-auth -n frontend || true
            kubectl delete secret acr-auth -n backend || true
            kubectl create secret docker-registry acr-auth \
              --docker-server=${{ env.ACR_LOGIN_SERVER }} \
              --docker-username=${{ env.ACR_USERNAME }} \
              --docker-password=${{ env.ACR_PASSWORD }} \
              --docker-email=odl_user_1468642@seneca-caa900naa.cloudlabs.ai \
              -n frontend
            kubectl create secret docker-registry acr-auth \
              --docker-server=${{ env.ACR_LOGIN_SERVER }} \
              --docker-username=${{ env.ACR_USERNAME }} \
              --docker-password=${{ env.ACR_PASSWORD }} \
              --docker-email=odl_user_1468642@seneca-caa900naa.cloudlabs.ai \
              -n backend

            # Conditionally apply frontend deployment if frontend image was updated
            if [[ "${{ env.build_frontend }}" == "true" ]]; then
              kubectl set image deployment/frontend-deployment frontend=${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.FRONTEND_IMAGE_TAG }} --record -n frontend
              kubectl rollout status deployment/frontend-deployment -n frontend
            fi

            # Conditionally apply backend deployment if backend image was updated
            if [[ "${{ env.build_backend }}" == "true" ]]; then
              kubectl set image deployment/backend-deployment backend=${{ env.ACR_LOGIN_SERVER }}/backend:${{ env.BACKEND_IMAGE_TAG }} --record -n backend
              kubectl rollout status deployment/backend-deployment -n backend
            fi

            # Apply service YAML files (unconditional)
            kubectl apply -f /home/azureuser/frontend-service.yaml
            kubectl apply -f /home/azureuser/backend-service.yaml
          EOF
