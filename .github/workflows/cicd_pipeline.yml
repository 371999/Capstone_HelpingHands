name: CI/CD for Application Deployment

on:
  push: 
    branches:
      - shreyas
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '**/cicd_pipeline.yml'
  workflow_dispatch:
    description: "Trigger workflow for manual CI/CD push"

permissions:
  id-token: write
  contents: read

env:
  ARM_USE_OIDC: "true"
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Run backend unit tests
        run: npm test
        working-directory: ./backend

      - name: Run backend integration tests
        run: npm run test:integration
        working-directory: ./backend

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run frontend unit tests
        run: npm test
        working-directory: ./frontend

      - name: Run frontend integration tests
        run: npm run test:integration
        working-directory: ./frontend

  test-docker:
    name: Docker Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Test Backend Docker Image
        run: |
          docker build -t backend-test ./backend
          docker run --rm backend-test npm run test:docker
        working-directory: ./backend

      - name: Build and Test Frontend Docker Image
        run: |
          docker build -t frontend-test ./frontend
          docker run --rm frontend-test npm run test:docker
        working-directory: ./frontend

  cicd:
    name: CI/CD for Application
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-docker]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init
      working-directory: terraform

    - name: Terraform Format
      run: terraform fmt -check
      working-directory: terraform

    - name: Set Up SSH Keys
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Get ACR Credentials and VM public IP
      id: get-acr
      run: |
        echo "ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server)" >> $GITHUB_ENV
        echo "ACR_USERNAME=$(terraform output -raw acr_username)" >> $GITHUB_ENV
        echo "ACR_PASSWORD=$(terraform output -raw acr_password)" >> $GITHUB_ENV
        echo "VM_PUBLIC_IP=$(terraform output -raw frontend_backend_public_ip)" >> $GITHUB_ENV
      working-directory: terraform

    - name: Login to ACR
      uses: azure/docker-login@v2
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ env.ACR_USERNAME }}
        password: ${{ env.ACR_PASSWORD }}

    - name: Build Docker Images - Frontend and Backend
      run: |
        docker buildx build --platform linux/amd64 -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend || exit 1
        docker buildx build --platform linux/amd64 -t ${{ env.ACR_LOGIN_SERVER }}/backend:latest ./backend || exit 1

    - name: Push Docker Images to ACR
      run: |
        docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
        docker push ${{ env.ACR_LOGIN_SERVER }}/backend:latest

    - name: SSH into Azure VM and Deploy Docker Containers
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa azureuser@${{ env.VM_PUBLIC_IP }} <<EOF
          echo ${{ env.ACR_PASSWORD }} | docker login ${{ env.ACR_LOGIN_SERVER }} -u ${{ env.ACR_USERNAME }} --password-stdin
          
          docker image prune -af || true

          docker pull ${{ env.ACR_LOGIN_SERVER }}/frontend:latest || exit 1
          docker pull ${{ env.ACR_LOGIN_SERVER }}/backend:latest || exit 1

          docker stop frontend || true && docker rm frontend || true
          docker stop backend || true && docker rm backend || true

          docker run -d --name frontend -p 3000:3000 -e NEXT_PUBLIC_API_URL=http://${{ env.VM_PUBLIC_IP }}:8080 -e NEXT_PUBLIC_AUTH_URL=http://${{ env.VM_PUBLIC_IP }}:8080 ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          docker run -d --name backend -p 8080:8080 -e PORT=8080 -e MONGODB_URI=${{ secrets.MONGODB_URI }} -e FRONTEND_URL=http://${{ env.VM_PUBLIC_IP }}:3000 -e JWT_SECRET=${{ secrets.JWT_SECRET }} ${{ env.ACR_LOGIN_SERVER }}/backend:latest
        EOF

  e2e-test:
    name: E2E Testing
    runs-on: ubuntu-latest
    needs: cicd

    steps:
      - name: Install Cypress
        run: npm install -g cypress

      - name: Run E2E Tests
        run: cypress run --config baseUrl=http://${{ env.VM_PUBLIC_IP }}:3000
