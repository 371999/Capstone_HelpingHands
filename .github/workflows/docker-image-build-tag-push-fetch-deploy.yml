name: Configure VM and build,tag,push and deploy with Docker Compose

on:
  workflow_dispatch:

jobs:
  configure-vm:
    name: Configure VM with Ansible
    runs-on: ubuntu-latest
    env:
      VM_PUBLIC_IP: ${{ secrets.VM_PUBLIC_IP }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

      - name: Copy Ansible Playbook to VM
        run: |
          scp -o "StrictHostKeyChecking=no" -i ssh_key.pem ansible-playbooks/install_docker_kubernetes.yaml azureuser@${{ env.VM_PUBLIC_IP }}:/home/azureuser/

      - name: SSH into VM to Install Ansible and Run Playbook
        run: |
          ssh -o "StrictHostKeyChecking=no" -i ssh_key.pem azureuser@${{ env.VM_PUBLIC_IP }} << 'EOF'
            sudo apt update
            sudo apt install -y ansible
            ansible-playbook -i "localhost," -c local /home/azureuser/install_docker_kubernetes.yaml
          EOF

  build-and-push-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: configure-vm
    env:
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}

    outputs:
      IMAGE_TAG: ${{ steps.set_image_tag.outputs.IMAGE_TAG }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Set Image Tag
        id: set_image_tag
        run: |
          IMAGE_TAG="v${{ github.run_number }}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "::set-output name=IMAGE_TAG::${IMAGE_TAG}"

      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} -f frontend/Dockerfile ./frontend
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}

      - name: Build and Push Backend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/backend:${{ env.IMAGE_TAG }} -f backend/Dockerfile ./backend
          docker push ${{ env.ACR_LOGIN_SERVER }}/backend:${{ env.IMAGE_TAG }}

  deploy-docker-compose:
    name: Deploy Docker Compose Changes
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    env:
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      VM_PUBLIC_IP: ${{ secrets.VM_PUBLIC_IP }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      IMAGE_TAG: ${{ needs.build-and-push-docker.outputs.IMAGE_TAG }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up SSH Key for VM access
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

      - name: Copy and Update docker-compose.yml to VM
        run: |
          sed -i "s|image: .*/frontend:.*|image: ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}|g" docker-compose.yml
          sed -i "s|image: .*/backend:.*|image: ${{ env.ACR_LOGIN_SERVER }}/backend:${{ env.IMAGE_TAG }}|g" docker-compose.yml
          scp -o "StrictHostKeyChecking=no" -i ssh_key.pem docker-compose.yml azureuser@${{ env.VM_PUBLIC_IP }}:/home/azureuser/

      - name: SSH into VM and Deploy with Docker Compose
        run: |
          ssh -o "StrictHostKeyChecking=no" -i ssh_key.pem azureuser@${{ env.VM_PUBLIC_IP }} << 'EOF'
            echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u "${{ secrets.ACR_USERNAME }}" --password-stdin
            cd /home/azureuser/
            if [ $(docker ps -q | wc -l) -gt 0 ]; then
              docker compose down
            fi
            docker compose up -d
          EOF
