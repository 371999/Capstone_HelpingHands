name: Configure VM, Build and Push Docker Images, and Deploy with Docker Compose

on:
  push:
    branches:
      - shreyas
    paths:
      - "frontend/**"
      - "backend/**"
jobs:
  configure-vm:
    name: Configure VM with Ansible
    runs-on: ubuntu-latest
    env:
      VM_PUBLIC_IP: ${{ secrets.VM_PUBLIC_IP }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up SSH Key
        run: |
          echo "${{ env.SSH_PRIVATE_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

      - name: Copy Ansible Playbook to VM
        run: |
          scp -o "StrictHostKeyChecking=no" -i ssh_key.pem ansible-playbooks/install_docker_kubernetes.yaml azureuser@${{ env.VM_PUBLIC_IP }}:/home/azureuser/

      - name: SSH into VM to Install Ansible and Run Playbook
        run: |
          ssh -o "StrictHostKeyChecking=no" -i ssh_key.pem azureuser@${{ env.VM_PUBLIC_IP }} << 'EOF'
            sudo apt update
            sudo apt install -y ansible
            ansible-playbook -i "localhost," -c local /home/azureuser/install_docker_kubernetes.yaml
          EOF

  build-and-push-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: configure-vm
    env:
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history to ensure access to previous commit

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Set Image Tag
        run: |
          IMAGE_TAG="v${{ github.run_number }}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${IMAGE_TAG} -f frontend/Dockerfile ./frontend
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${IMAGE_TAG}

      - name: Build and Push Backend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/backend:${IMAGE_TAG} -f backend/Dockerfile ./backend
          docker push ${{ env.ACR_LOGIN_SERVER }}/backend:${IMAGE_TAG}

  deploy-docker-compose:
    name: Deploy Docker Compose Changes
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    env:
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      VM_PUBLIC_IP: ${{ secrets.VM_PUBLIC_IP }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      IMAGE_TAG: ${{ env.IMAGE_TAG }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up SSH Key for VM access
        run: |
          echo "${{ env.SSH_PRIVATE_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

      - name: Copy and Update docker-compose.yml to VM
        run: |
          # Update docker-compose.yml locally with the new image tags
          sed -i "s|image: .*/frontend:.*|image: ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}|g" docker-compose.yml
          sed -i "s|image: .*/backend:.*|image: ${{ env.ACR_LOGIN_SERVER }}/backend:${{ env.IMAGE_TAG }}|g" docker-compose.yml
          
          # Copy updated docker-compose.yml to VM
          scp -o "StrictHostKeyChecking=no" -i ssh_key.pem docker-compose.yml azureuser@${{ env.VM_PUBLIC_IP }}:/home/azureuser/

      - name: SSH into VM and Deploy with Docker Compose
        run: |
          ssh -o "StrictHostKeyChecking=no" -i ssh_key.pem azureuser@${{ env.VM_PUBLIC_IP }} << 'EOF'
            echo "${{ env.ACR_PASSWORD }}" | docker login ${{ env.ACR_LOGIN_SERVER }} -u "${{ env.ACR_USERNAME }}" --password-stdin
            cd /home/azureuser/

            # Check if Docker containers are running
            if [ $(docker ps -q | wc -l) -gt 0 ]; then
              echo "Docker containers are running. Stopping and removing them..."
              docker compose down
            else
              echo "No Docker containers are running."
            fi

            # Start new Docker containers
            docker compose up -d
          EOF
