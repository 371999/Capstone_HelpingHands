name: Terraform Provisioning
on:
  push:
    branches:
      - shreyas
    paths:
      - "azure-terraform/**"
  workflow_dispatch:

jobs:
  provision-infrastructure:
    name: Provision Infrastructure with Terraform
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: |
          cd azure-terraform
          terraform init

      - name: Apply Terraform Configuration
        run: |
          cd azure-terraform
          terraform apply -auto-approve

      - name: Capture Outputs
        id: capture_outputs
        run: |
          cd azure-terraform
          # Capture Terraform outputs and write them to a file
          terraform output -json > ../terraform_outputs.json
        shell: bash

      - name: Debug Outputs
        run: |
          cat terraform_outputs.json
        shell: bash

      - name: Extract Outputs and Set Environment Variables
        id: extract_outputs
        run: |
          # Extract outputs from JSON file
          VM_PUBLIC_IP=$(jq -r '.vm_public_ip.value' terraform_outputs.json)
          ACR_LOGIN_SERVER=$(jq -r '.acr_login_server.value' terraform_outputs.json)
          ACR_USERNAME=$(jq -r '.acr_username.value' terraform_outputs.json)
          ACR_PASSWORD=$(jq -r '.acr_password.value' terraform_outputs.json)

          # Set environment variables for later use in this workflow
          echo "VM_PUBLIC_IP=$VM_PUBLIC_IP" >> $GITHUB_ENV
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV
        shell: bash

      - name: Debug Environment Variables
        run: |
          echo "VM_PUBLIC_IP: ${{ env.VM_PUBLIC_IP }}"
          echo "ACR_LOGIN_SERVER: ${{ env.ACR_LOGIN_SERVER }}"
          echo "ACR_USERNAME: [HIDDEN]"
          echo "ACR_PASSWORD: [HIDDEN]"
        shell: bash

      - name: Update Frontend .env File
        run: |
          if [ -d "frontend" ]; then
            cd frontend
            sed -i "s|NEXT_PUBLIC_API_URL=http://localhost:8080|NEXT_PUBLIC_API_URL=http://${{ env.VM_PUBLIC_IP }}:8080|g" .env
            sed -i "s|NEXT_PUBLIC_AUTH_URL=http://localhost:8080|NEXT_PUBLIC_AUTH_URL=http://${{ env.VM_PUBLIC_IP }}:8080|g" .env
          else
            echo "Directory 'frontend' not found. Skipping update."
          fi
        shell: bash

      - name: Update Backend .env File
        run: |
          if [ -d "backend" ]; then
            cd backend
            sed -i "s|FRONTEND_URL=http://localhost:3000|FRONTEND_URL=http://${{ env.VM_PUBLIC_IP }}:3000|g" .env
          else
            echo "Directory 'backend' not found. Skipping update."
          fi
        shell: bash

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add frontend/.env backend/.env
          git commit -m "Update .env files with VM public IP and ACR details" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-secrets:
    name: Update GitHub Secrets with Terraform Outputs
    runs-on: ubuntu-latest
    needs: provision-infrastructure
    steps:
      - name: Download Outputs Artifact
        uses: actions/download-artifact@v3
        with:
          name: terraform-outputs

      - name: Update GitHub Secrets
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Read outputs from the artifact file and update secrets
          jq -r 'to_entries[] | "\(.key)=\(.value.value)"' terraform_outputs.json | while IFS='=' read -r key value; do
            echo "Updating secret $key..."
            curl -X PUT -H "Authorization: Bearer $PAT_TOKEN" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/${{ github.repository }}/actions/secrets/$key \
                 -d "{\"encrypted_value\":\"$value\"}"
          done
