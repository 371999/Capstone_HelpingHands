name: Terraform Provisioning and Docker Deployment

on:
  push:
    branches:
      - shreyas
    paths:
      - "azure-terraform/**"
      - "docker-compose.yml"
  workflow_dispatch:

jobs:
  provision-infrastructure:
    name: Provision Infrastructure with Terraform
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}

    outputs:
      VM_PUBLIC_IP: ${{ steps.capture_outputs.outputs.VM_PUBLIC_IP }}
      ACR_LOGIN_SERVER: ${{ steps.capture_outputs.outputs.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ steps.capture_outputs.outputs.ACR_USERNAME }}
      ACR_PASSWORD: ${{ steps.capture_outputs.outputs.ACR_PASSWORD }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Install Terraform
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install -y terraform

      - name: Terraform Init and Apply
        run: |
          cd azure-terraform
          terraform init
          terraform apply -auto-approve

      - name: Capture Outputs and Set Environment Variables
        id: capture_outputs
        run: |
          cd azure-terraform

          # Capture outputs directly from terraform output command
          VM_PUBLIC_IP=$(terraform output -raw vm_public_ip)
          ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server)
          ACR_USERNAME=$(terraform output -raw acr_username)
          ACR_PASSWORD=$(terraform output -raw acr_password)

          # Debug the extracted values to make sure they're correct
          echo "Extracted VM_PUBLIC_IP: $VM_PUBLIC_IP"
          echo "Extracted ACR_LOGIN_SERVER: $ACR_LOGIN_SERVER"
          echo "Extracted ACR_USERNAME: $ACR_USERNAME"
          echo "Extracted ACR_PASSWORD: [REDACTED]"

          # Set outputs for use in other jobs
          echo "::set-output name=VM_PUBLIC_IP::$VM_PUBLIC_IP"
          echo "::set-output name=ACR_LOGIN_SERVER::$ACR_LOGIN_SERVER"
          echo "::set-output name=ACR_USERNAME::$ACR_USERNAME"
          echo "::set-output name=ACR_PASSWORD::$ACR_PASSWORD"

  configure-vm:
    name: Configure VM with Ansible
    runs-on: ubuntu-latest
    needs: provision-infrastructure
    env:
      VM_PUBLIC_IP: ${{ needs.provision-infrastructure.outputs.VM_PUBLIC_IP }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

      - name: Copy Ansible Playbook to VM
        run: |
          scp -o "StrictHostKeyChecking=no" -i ssh_key.pem ansible-playbooks/install_docker_kubernetes.yaml azureuser@$VM_PUBLIC_IP:/home/azureuser/

      - name: SSH into VM to Install Ansible and Run Playbook
        run: |
          ssh -o "StrictHostKeyChecking=no" -i ssh_key.pem azureuser@$VM_PUBLIC_IP << 'EOF'
            sudo apt update
            sudo apt install -y ansible
            ansible-playbook -i "localhost," -c local /home/azureuser/install_docker_kubernetes.yaml
          EOF

  build-and-push-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: configure-vm
    env:
      ACR_LOGIN_SERVER: ${{ needs.provision-infrastructure.outputs.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ needs.provision-infrastructure.outputs.ACR_USERNAME }}
      ACR_PASSWORD: ${{ needs.provision-infrastructure.outputs.ACR_PASSWORD }}
      VM_PUBLIC_IP: ${{ needs.provision-infrastructure.outputs.VM_PUBLIC_IP }}

    outputs:
      IMAGE_TAG: ${{ steps.set_image_tag.outputs.IMAGE_TAG }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Update Frontend .env File
        run: |
          cd frontend
          sed -i "s|NEXT_PUBLIC_API_URL=http://localhost:8080|NEXT_PUBLIC_API_URL=http://${{ env.VM_PUBLIC_IP }}:8080|g" .env
          sed -i "s|NEXT_PUBLIC_AUTH_URL=http://localhost:8080|NEXT_PUBLIC_AUTH_URL=http://${{ env.VM_PUBLIC_IP }}:8080|g" .env

      - name: Update Backend .env File
        run: |
          cd backend
          sed -i "s|FRONTEND_URL=http://localhost:3000|FRONTEND_URL=http://${{ env.VM_PUBLIC_IP }}:3000|g" .env

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Set Image Tag
        id: set_image_tag
        run: |
          IMAGE_TAG="v${{ github.run_number }}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "::set-output name=IMAGE_TAG::${IMAGE_TAG}"

      - name: Build and Push Frontend Image
        run: |
          docker build -t $ACR_LOGIN_SERVER/frontend:${{ env.IMAGE_TAG }} -f frontend/Dockerfile ./frontend
          docker push $ACR_LOGIN_SERVER/frontend:${{ env.IMAGE_TAG }}

      - name: Build and Push Backend Image
        run: |
          docker build -t $ACR_LOGIN_SERVER/backend:${{ env.IMAGE_TAG }} -f backend/Dockerfile ./backend
          docker push $ACR_LOGIN_SERVER/backend:${{ env.IMAGE_TAG }}

  deploy-docker-compose:
    name: Deploy Docker Compose Changes
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    env:
      ACR_LOGIN_SERVER: ${{ needs.provision-infrastructure.outputs.ACR_LOGIN_SERVER }}
      ACR_USERNAME: ${{ needs.provision-infrastructure.outputs.ACR_USERNAME }}
      ACR_PASSWORD: ${{ needs.provision-infrastructure.outputs.ACR_PASSWORD }}
      VM_PUBLIC_IP: ${{ needs.provision-infrastructure.outputs.VM_PUBLIC_IP }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      IMAGE_TAG: ${{ needs.build-and-push-docker.outputs.IMAGE_TAG }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up SSH Key for VM access
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

      - name: Copy and Update docker-compose.yml to VM
        run: |
          sed -i "s|image: .*/frontend:.*|image: $ACR_LOGIN_SERVER/frontend:${{ env.IMAGE_TAG }}|g" docker-compose.yml
          sed -i "s|image: .*/backend:.*|image: $ACR_LOGIN_SERVER/backend:${{ env.IMAGE_TAG }}|g" docker-compose.yml
          scp -o "StrictHostKeyChecking=no" -i ssh_key.pem docker-compose.yml azureuser@$VM_PUBLIC_IP:/home/azureuser/

      - name: SSH into VM and Deploy with Docker Compose
        run: |
          ssh -o "StrictHostKeyChecking=no" -i ssh_key.pem azureuser@$VM_PUBLIC_IP << 'EOF'
            echo "$ACR_PASSWORD" | docker login $ACR_LOGIN_SERVER -u "$ACR_USERNAME" --password-stdin
            cd /home/azureuser/
            if [ $(docker ps -q | wc -l) -gt 0 ]; then
              docker compose down
            fi
            docker compose up -d
          EOF
