name: Terraform Provisioning
on:
  push:
    branches:
      - shreyas
    paths:
      - "azure-terraform/**"
  workflow_dispatch:

jobs:
  provision-infrastructure: 
    name: Provision Infrastructure with Terraform
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: |
          cd azure-terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd azure-terraform
          terraform apply -auto-approve

      - name: Capture Outputs
        id: outputs
        run: |
          # Capture non-sensitive and sensitive outputs
          ACR_USERNAME=$(terraform output -json acr_username | jq -r '.value' || echo "error")
          ACR_PASSWORD=$(terraform output -json acr_password | jq -r '.value' || echo "error")
          VM_PUBLIC_IP=$(terraform output vm_public_ip | awk -F ' = ' '{print $2}' | tr -d '"')
          ACR_LOGIN_SERVER=$(terraform output acr_login_server | awk -F ' = ' '{print $2}' | tr -d '"')

          # Debug: Print non-sensitive outputs to verify values (Sensitive outputs hidden)
          echo "ACR_USERNAME: [HIDDEN]"   # Do not print sensitive data
          echo "ACR_PASSWORD: [HIDDEN]"   # Do not print sensitive data
          echo "VM_PUBLIC_IP: $VM_PUBLIC_IP"
          echo "ACR_LOGIN_SERVER: $ACR_LOGIN_SERVER"

          # Check if any output failed to capture correctly
          if [[ "$ACR_USERNAME" == "error" || "$ACR_PASSWORD" == "error" || -z "$VM_PUBLIC_IP" || -z "$ACR_LOGIN_SERVER" ]]; then
            echo "Error: One or more Terraform outputs failed to retrieve correctly."
            exit 1
          fi

          # Export outputs to GITHUB_ENV
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV
          echo "VM_PUBLIC_IP=$VM_PUBLIC_IP" >> $GITHUB_ENV
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV

      - name: Update Frontend .env File
        run: |
          cd frontend
          sed -i "s|NEXT_PUBLIC_API_URL=http://localhost:8080|NEXT_PUBLIC_API_URL=http://${{ env.VM_PUBLIC_IP }}:8080|g" .env
          sed -i "s|NEXT_PUBLIC_AUTH_URL=http://localhost:8080|NEXT_PUBLIC_AUTH_URL=http://${{ env.VM_PUBLIC_IP }}:8080|g" .env

      - name: Update Backend .env File
        run: |
          cd backend
          sed -i "s|FRONTEND_URL=http://localhost:3000|FRONTEND_URL=http://${{ env.VM_PUBLIC_IP }}:3000|g" .env
