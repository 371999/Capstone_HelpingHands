name: Terraform Provisioning
on:
  push:
    branches:
      - shreyas
    paths:
      - "azure-terraform/**"
  workflow_dispatch:

jobs:
  provision-infrastructure:
    name: Provision Infrastructure with Terraform
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: |
          cd azure-terraform
          terraform init

      - name: Apply Terraform Configuration
        run: |
          cd azure-terraform
          terraform apply -auto-approve

      - name: Capture Outputs and Set Environment Variables
        id: capture_outputs
        run: |
          cd azure-terraform

          # Capture outputs directly from terraform output command, removing unwanted lines using grep
          VM_PUBLIC_IP=$(terraform output -raw vm_public_ip 2>/dev/null | grep -Eo '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
          ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server 2>/dev/null | awk '{print $1}')
          ACR_USERNAME=$(terraform output -raw acr_username 2>/dev/null | awk '{print $1}')
          ACR_PASSWORD=$(terraform output -raw acr_password 2>/dev/null | awk '{print $1}')

          # Debug the extracted values to make sure they're correct
          echo "Extracted VM_PUBLIC_IP: $VM_PUBLIC_IP"
          echo "Extracted ACR_LOGIN_SERVER: $ACR_LOGIN_SERVER"
          echo "Extracted ACR_USERNAME: $ACR_USERNAME"
          echo "Extracted ACR_PASSWORD: [REDACTED]"

          # Set environment variables for later use in this workflow
          echo "VM_PUBLIC_IP=$VM_PUBLIC_IP" >> $GITHUB_ENV
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV
        shell: bash

      - name: Update Frontend .env File
        run: |
          # Update the .env file in the frontend folder with the captured VM_PUBLIC_IP
          cd frontend
          sed -i "s|NEXT_PUBLIC_API_URL=http://localhost:8080|NEXT_PUBLIC_API_URL=http://${{ env.VM_PUBLIC_IP }}:8080|g" .env
          sed -i "s|NEXT_PUBLIC_AUTH_URL=http://localhost:8080|NEXT_PUBLIC_AUTH_URL=http://${{ env.VM_PUBLIC_IP }}:8080|g" .env
        shell: bash

      - name: Update Backend .env File
        run: |
          # Update the .env file in the backend folder with the captured VM_PUBLIC_IP
          cd backend
          sed -i "s|FRONTEND_URL=http://localhost:3000|FRONTEND_URL=http://${{ env.VM_PUBLIC_IP }}:3000|g" .env
        shell: bash

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add frontend/.env backend/.env
          git commit -m "Update .env files with VM public IP"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-secrets:
    name: Update GitHub Secrets with Terraform Outputs
    runs-on: ubuntu-latest
    needs: provision-infrastructure
    steps:
      - name: Update GitHub Secrets
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          VM_PUBLIC_IP: ${{ env.VM_PUBLIC_IP }}
          ACR_LOGIN_SERVER: ${{ env.ACR_LOGIN_SERVER }}
          ACR_USERNAME: ${{ env.ACR_USERNAME }}
          ACR_PASSWORD: ${{ env.ACR_PASSWORD }}
        run: |
          # Update the GitHub repository secrets
          declare -A secrets=(
            ["VM_PUBLIC_IP"]="$VM_PUBLIC_IP"
            ["ACR_LOGIN_SERVER"]="$ACR_LOGIN_SERVER"
            ["ACR_USERNAME"]="$ACR_USERNAME"
            ["ACR_PASSWORD"]="$ACR_PASSWORD"
          )

          for key in "${!secrets[@]}"; do
            value="${secrets[$key]}"
            echo "Updating secret $key..."
            curl -X PUT -H "Authorization: Bearer $PAT_TOKEN" \
                 -H "Accept: application/vnd.github.v3+json" \
                 -H "Content-Type: application/json" \
                 https://api.github.com/repos/${{ github.repository }}/actions/secrets/$key \
                 -d "{\"encrypted_value\":\"$value\"}"
          done
        shell: bash
